@using LiveChartsCore.SkiaSharpView.Blazor;
@using Newtonsoft.Json;
@using OnlineCalibrator.Service
@using OnlineCalibrator.Shared;
@using System
@using System.Text
@using System.IO
@using System.Text.RegularExpressions
@using Microsoft.Extensions.Logging
@using SkiaSharp;
@using SpawnDev.BlazorJS.WebWorkers
@using Stochastique.Distributions
@using Stochastique.Enums;
@using Stochastique;
@using LiveChartsCore.SkiaSharpView.Painting;
@using Stochastique.Test
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject IJSRuntime js
@inject DonneeContainer donneeContainer
@page "/AnalyseDistribution"
<nav class="navbar navbar-expand-lg navbar-light bg-light mynavbar" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/Import">Import des données</a></li>
        @if (DonneesImportes != null)
        {
            <li class="breadcrumb-item"><a href="/CalibrateDistribution">Calibration des données (@DonneesImportes.NomData)</a></li>
        }
        else
        {
            <li class="breadcrumb-item"><a href="/CalibrateDistribution">Calibration des données </a></li>
        }
        <li class="breadcrumb-item active">Identification de la loi</li>
    </ol>
</nav>
<!-- Modal -->
<div @onclick="HideModal" class="modal @(showModal?"":"fade")" style="@(showModal?"display: block;padding-right: 17px;background:#555555AA;":"display: none;")" id="exampleModalLong" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
    <div class="modal-dialog" style="max-width:100vw">
        <div class="modal-content" style="height:90vh;width:90vw;position:absolute;top:5vh;left:5vw; display:block" >
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Graphique </h5>
                <button type="button" class="btn btn-close" data-dismiss="modal" aria-label="Close" @onclick="HideModal">
                </button>
            </div>
            <div class="modal-body" style="height:80vh;width:90vw" >
                @if (CurrentFullSizeChart != null)
                {
                    if (CurrentFullSizeChart.YAxes != null)
                    {

                        <CartesianChart Series="CurrentFullSizeChart.Series" DrawMarginFrame="CurrentFullSizeChart.DrawMarginFrame" YAxes="CurrentFullSizeChart.YAxes" />
                    }
                    else
                    {
                        <CartesianChart Series="CurrentFullSizeChart.Series" DrawMarginFrame="CurrentFullSizeChart.DrawMarginFrame" />
                    }
                }
            </div>
        </div>
    </div>
</div>


<div class="row">
    @if (DonneesImportes != null)
    {
        <div class="col-6 col-sm-12 col-xl-6 align-items-stretch">
            <div class="card">
                <div class="card-header">
                    Paramétrage de la calibration
                </div>
                <div class="card-body">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @onchange="(ChangeEventArgs e) => UpdateCalibration(e,true)" value="@DonneesImportes.ActualData.IncludeTrunkatedDistributions" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            Inclure les distributions tronqués
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="flexCheckDefault" @onchange="(ChangeEventArgs e) => UpdateCalibration(e,false)" value="@DonneesImportes.ActualData.IsDiscreteDistribution">
                        <label class="form-check-label" for="flexCheckDefault">
                            Distributions discrètes?
                        </label>
                    </div>
                    @if (DonneesImportes.ActualData != null && DonneesImportes.ActualData.CalibratedDistribution != null)
                    {
                        <InputSelect class="form-select form-select-lg" ValueExpression="@(()=>DonneesImportes.ActualData.MethodeCalibration)" Value="@DonneesImportes.ActualData.MethodeCalibration" ValueChanged="(MethodeCalibrationRetenue s)=>ChangeSelectionMethod(s)">
                            @foreach (var item in AviableMethod)
                            {
                                <option value="@item">@item</option>
                            }
                            )
                        </InputSelect>
                        @if (DonneesImportes.ActualData.MethodeCalibration == MethodeCalibrationRetenue.Manuelle)
                        {
                            <InputSelect class="form-select form-select-lg" ValueExpression="@(()=>DonneesImportes.ActualData.CalibratedTypeDistribution)" Value="@DonneesImportes.ActualData.CalibratedTypeDistribution" ValueChanged="(TypeDistribution? s)=>{DonneesImportes.ActualData.CalibratedTypeDistribution=s; UpdateChart();}">
                                @foreach (var item in DonneesImportes.ActualData.VisisbleData.Select(a => a.Distribution))
                                {
                                    <option value="@item.Type">@item.Type</option>
                                }
                                )
                            </InputSelect>
                        }
                        <div class="pt-3">
                            <h5 class="fw-bold">
                                @DonneesImportes.ActualData.CalibratedDistribution?.Type
                            </h5>
                        </div>
                        <ul>
                            @foreach (var item in DonneesImportes.ActualData.CalibratedDistribution?.AllParameters())
                            {
                                <li>@item.Name : @item.Value</li>
                            }
                        </ul>
                    }
                    @if (DonneesImportes.ActualData != null && DonneesImportes.ActualData.CalibratedDistribution != null)
                    {
                        <div class="pt-3" @onclick="()=>ShowFullScreen(PDFCDF)">
                            <h5> PDF + CDF </h5>
                            <CartesianChart Series="PDFCDF.Series" DrawMarginFrame="PDFCDF.DrawMarginFrame" YAxes="PDFCDF.YAxes" />
                        </div>
                        @if (DonneesImportes.ActualData.CurrentDistribution.CarloQuantileTest == null)
                        {
                            <button class="btn btn-primary" @onclick="AddMonteCarlo">Ajouter un test basés sur les quantiles simulés</button>
                        }
                        else
                        {
                            <InputNumber class="form-control" @bind-Value="DonneesImportes.ActualData.CurrentDistribution.CarloQuantileTest.Alpha" />
                            <div class="pt-3" @onclick="()=>ShowFullScreen(Quantile)">
                                <h5>Quantile Plot</h5>
                                <CartesianChart Series="Quantile.Series" DrawMarginFrame="Quantile.DrawMarginFrame" />
                            </div>
                        }

                    }



                    <!--A réactiver quand je ferais le ml en full js <button class="btn btn-primary" @onclick="CalibrateMLI">Faire une calibration par reconnaissance d'image</button>-->
                </div>
            </div>
            <div class="card">
                <div class="card-header">
                    Simulation de la loi calibré (csv)
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label class="form-check-label">Nombre de ligne</label>
                        <InputNumber @bind-Value="@NbRow" />
                    </div>
                    <div class="form-group">
                        <label class="form-check-label">Nombre de colonne</label>
                        <InputNumber @bind-Value="@NbCol" />
                    </div>
                    <button class="btn btn-primary" @onclick="ExportSample">Exporter une simulation</button>
                </div>
            </div>
        </div>
        <div class="col-6 col-sm-12 col-xl-6 align-items-stretch">
            <div class="card">
                <div class="card-header">
                    Analyse de la loi sélectionnée
                </div>
                <div class="card-body">
                    @if (DonneesImportes.ActualData != null && DonneesImportes.ActualData.CalibratedDistribution != null)
                    {
                        <div @onclick="()=>ShowFullScreen(QQPlot)">
                            QQPlot
                            <CartesianChart Series="QQPlot.Series" DrawMarginFrame="QQPlot.DrawMarginFrame"  />
                        </div>
                    }
                    @if (DonneesImportes.ActualData != null && DonneesImportes.ActualData.CalibratedDistribution != null)
                    {
                        <div @onclick="()=>ShowFullScreen(PPPlot)">
                            PPPlot
                            <CartesianChart Series="PPPlot.Series" DrawMarginFrame="PPPlot.DrawMarginFrame" />
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @if (distributions != null)
    {
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    Métriques des lois calibrés
                </div>
                <div class="card-body" style="max-width:100%;">
                    <div class="table-responsive text-nowrap">
                        <table class="table">
                            <thead>

                            <th class="text-center">Loi</th>
                            <th class="text-center">LogLikelihood</th>
                            <th class="text-center">AIC</th>
                            <th class="text-center">BIC</th>
                            <th class="text-center">KS-Test P-Value</th>
                                @for (int i = 0; i < distributions.Max(a => a.Distribution.AllParameters().Count()); i++)
                                {
                                <th class="text-center">Parametre @(i + 1)</th>
                                }
                            <th class="text-center">Esperance(%Ecart)</th>
                            <th class="text-center">Variance(%Ecart)</th>
                            <th class="text-center">Aplatissement(%Ecart)</th>
                            <th class="text-center">Kurtosis(%Ecart)</th>
                            </thead>
                            <tbody>
                                @if (distributions != null)
                                {
                                    @foreach (var distrib in distributions)
                                    {
                                        <tr>
                                            <td class="text-center">@distrib.Distribution.Type</td>
                                            <td>@distrib.LogLikelihood.ToBeautifulString()</td>
                                            <td>@distrib.AIC.ToBeautifulString()</td>
                                            <td>@distrib.BIC.ToBeautifulString()</td>
                                            <td>@distrib.TestStatistiques.FirstOrDefault(a => a.TypeTestStatistique == TypeTestStatistique.KolmogorovSmirnov)?.PValue.ToBeautifulString()</td>
                                            @for (int i = 0; i < distributions.Max(a => a.Distribution.AllParameters().Count()); i++)
                                            {
                                                if (i < distrib.Distribution.AllParameters().Count())
                                                {
                                                    <td>@distrib.Distribution.AllParameters().ElementAt(i).ToString()</td>
                                                }
                                                else
                                                {
                                                    <td></td>
                                                }
                                            }

                                            <td>@distrib.Distribution.ExpextedValue().ToBeautifulString() (@(((DonneesImportes.ActualData.Moyenne - @distrib.Distribution.ExpextedValue()) / Math.Max(DonneesImportes.ActualData.Moyenne, @distrib.Distribution.ExpextedValue())).ToBeautifulString(true)))</td>
                                            <td>@distrib.Distribution.Variance().ToBeautifulString() (@(((DonneesImportes.ActualData.Variance - @distrib.Distribution.Variance()) / Math.Max(DonneesImportes.ActualData.Variance, @distrib.Distribution.Variance())).ToBeautifulString(true)))</td>
                                            <td>@distrib.Distribution.Skewness().ToBeautifulString() (@(((DonneesImportes.ActualData.Skewness - @distrib.Distribution.Skewness()) / Math.Max(DonneesImportes.ActualData.Skewness, @distrib.Distribution.Skewness())).ToBeautifulString(true)))</td>
                                            <td>@distrib.Distribution.Kurtosis().ToBeautifulString() (@(((DonneesImportes.ActualData.Kurtosis - @distrib.Distribution.Kurtosis()) / Math.Max(DonneesImportes.ActualData.Kurtosis, @distrib.Distribution.Kurtosis())).ToBeautifulString(true)))</td>

                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<div class="toast-container position-absolute p-3 bottom-0 end-0">
    @foreach (var error in Notifications)
    {
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false">
            <div class="toast-header">
                <iconify-icon icon="oi:info" class="text-info"></iconify-icon>
                <strong class="me-auto">Erreur</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" @onclick="@(()=>SuppressionNotification(error))" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                @error
            </div>
        </div>
    }

</div>




@code {
    private bool isInit;
    private List<MethodeCalibrationRetenue> AviableMethod = new List<MethodeCalibrationRetenue> { MethodeCalibrationRetenue.Vraisemblance, MethodeCalibrationRetenue.AIC, MethodeCalibrationRetenue.BIC, MethodeCalibrationRetenue.KSTest, MethodeCalibrationRetenue.Manuelle };
    private List<DistributionWithDatas>? distributions;
    private DonneesImportes? DonneesImportes;
    private ChartViewModelLine? QQPlot;
    private ChartViewModelLine? PPPlot;
    private ChartViewModelLine? PDFCDF;
    private ChartViewModelLine? Quantile;

    private ChartViewModelLine? CurrentFullSizeChart;
    private bool showModal;
    private List<string> Notifications = new List<string>();
    private int NbRow = 1000;
    private int NbCol = 10;
    protected override async void OnInitialized()
    {
        if (donneeContainer.Value != null)
        {
            DonneesImportes = donneeContainer.Value;
        }
        else
        {
            var data = await sessionStorage.GetItemAsStringAsync("donneesImportes");
            DonneesImportes = DonneesImportes.FromMsgPack(Convert.FromBase64String(data));
        }
        if (DonneesImportes.ActualData != null)
        {
            distributions = DonneesImportes.ActualData?.GetAllDistributions();
            isInit = true;
            ChangeSelectionMethod(DonneesImportes.ActualData.MethodeCalibration);
            SaveData();
            StateHasChanged();
        }
    }

    private async void SaveData()
    {
        donneeContainer.SetValue(DonneesImportes);
        var data = DonneesImportes.ToMsgPack();
        await sessionStorage.SetItemAsStringAsync("donneesImportes", Convert.ToBase64String(data));
    }

    protected void UpdateCalibration(ChangeEventArgs e, bool isTrunkated)
    {
        if (isTrunkated)
        {
            DonneesImportes.ActualData.IncludeTrunkatedDistributions = (bool)e.Value;
        }
        else
        {
            DonneesImportes.ActualData.IsDiscreteDistribution = (bool)e.Value;
        }
        if (isInit)
        {
            distributions = DonneesImportes.ActualData?.GetAllDistributions();
            ChangeSelectionMethod(DonneesImportes.ActualData.MethodeCalibration);
            UpdateChart();
            SaveData();

        }
    }

    protected void ChangeSelectionMethod(MethodeCalibrationRetenue m)
    {
        DonneesImportes.ActualData?.ChangeSelectionMethod(m);
        UpdateChart();
        SaveData();

    }
    public async void UpdateChart()
    {

        QQPlot = new ChartViewModelLine(
        DonneesImportes.ActualData?.GetQQPlot(),
        new List<Paint>() { new SolidColorPaint(SKColors.CornflowerBlue, 5), new SolidColorPaint(SKColors.IndianRed, 5) },
        new List<Paint>() { null, null },
        new List<double>() { 0, 0 }, new List<Paint>() { null, null });
        PPPlot = new ChartViewModelLine(
        DonneesImportes.ActualData?.GetPPPlot(),
        new List<Paint>() { new SolidColorPaint(SKColors.CornflowerBlue, 5), new SolidColorPaint(SKColors.IndianRed, 5) },
        new List<Paint>() { null, null },
        new List<double>() { 0, 0 }, new List<Paint>() { null, null });
        PDFCDF = new ChartViewModelLine(
            DonneesImportes.ActualData?.GetCDFPDF(),
            new List<Paint>() { new SolidColorPaint(SKColors.CornflowerBlue, 5), new SolidColorPaint(SKColors.IndianRed, 5) },
            new List<Paint>() { null, null },
        new List<double>() { 0, 0 }, new List<Paint>() { null, null }, true
        );
        if (DonneesImportes.ActualData?.CurrentDistribution?.CarloQuantileTest != null)
        {
            Quantile = new ChartViewModelLine(
                DonneesImportes.ActualData?.GetQuantilePlot(),
                new List<Paint>() { null, null, null, null },
                new List<Paint>() { new SolidColorPaint(new SKColor(0xFFFFFF55)), new SolidColorPaint(new SKColor(0xFFFFA555)), new SolidColorPaint(new SKColor(0xFFFF0055)), null },
                new List<double>() { 0, 0, 0, 10 }, new List<Paint>() { null, null, null,  new SolidColorPaint( ) { Color= SKColors.Blue, IsFill=true  } }
            );
        }
        StateHasChanged();
    }
    public async void ExportSample()
    {
        Random r = MersenneTwister.MTRandom.Create(1234533);
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < NbRow; i++)
        {
            var sample = DonneesImportes.ActualData?.CalibratedDistribution.Simulate(r, NbCol);
            sb.AppendLine(string.Join(";", sample.Select(a => a.ToString())));
        }
        await FileUtil.SaveAs(js, "sample.csv", System.Text.Encoding.UTF8.GetBytes(sb.ToString()));
    }
    public async void AddMonteCarlo()
    {
        DonneesImportes?.ActualData?.AddMonteCarloTest();
        UpdateChart();
        SaveData();
    }
    public async void CalibrateMLI()
    {
        Notifications.Add($"La calibration par reconnaissance d'image est en cours, le calcul est long, vous receverez une notification lors de la fin du calcul.{(Environement.IsMAUI ? "" : " Ne fermez pas longlet avant la fin du calcul")}");
        StateHasChanged();
        var service = new MLService();
        await service.Train(DonneesImportes.ActualData, () =>
        {
            AviableMethod.Add(MethodeCalibrationRetenue.MachineLearningImage);
            Notifications.Add($"La calibration est terminée");
            StateHasChanged();
        });

    }

    public void SuppressionNotification(string notif)
    {
        Notifications.Remove(notif);
    }

    public async void ShowFullScreen(ChartViewModelLine chartViewModelLine)
    {
        CurrentFullSizeChart = chartViewModelLine;
        showModal = true;
    }
    public void HideModal()
    {
        showModal = false;
    }
}
