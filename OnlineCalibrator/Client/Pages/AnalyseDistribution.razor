@using LiveChartsCore.SkiaSharpView.Blazor;
@using Newtonsoft.Json;
@using OnlineCalibrator.Shared;
@using System
@using System.IO
@using System.Text.RegularExpressions
@using Microsoft.Extensions.Logging
@using SkiaSharp;
@using Stochastique.Enums;
@using Stochastique;
@using LiveChartsCore.SkiaSharpView.Painting;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject DonneeContainer donneeContainer
@page "/AnalyseDistribution"
<nav class="navbar navbar-expand-lg navbar-light bg-light mynavbar" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/Import">Import des données</a></li>
        <li class="breadcrumb-item"><a href="/CalibrateDistribution">Calibration des données (@DonneesImportes.NomData)</a></li>
        <li class="breadcrumb-item active">Identification de la loi</li>
    </ol>
</nav>
<div class="row">
    @if (DonneesImportes != null)
    {
        <div class="col-6 col-sm-12 col-xl-6">
            <div class="card">
                <div class="card-header">
                    Paramétrage de la calibration
                </div>
                <div class="card-body">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @onchange="(ChangeEventArgs e) => UpdateCalibration(e,true)" value="@DonneesImportes.ActualData.IncludeTrunkatedDistributions" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            Inclure les distributions tronqués
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="flexCheckDefault" @onchange="(ChangeEventArgs e) => UpdateCalibration(e,false)" value="@DonneesImportes.ActualData.IsDiscreteDistribution">
                        <label class="form-check-label" for="flexCheckDefault">
                            Distributions discrètes?
                        </label>
                    </div>

                </div>
            </div>
        </div>
        <div class="col-6 col-sm-12 col-xl-6">
            <div class="card">
                <div class="card-header">
                    Selection de la loi
                </div>
                <div class="card-body">
                    @if (DonneesImportes.ActualData != null && DonneesImportes.ActualData.CalibratedDistribution != null)
                    {

                        <InputSelect class="form-select form-select-lg" ValueExpression="@(()=>DonneesImportes.ActualData.MethodeCalibration)" Value="@DonneesImportes.ActualData.MethodeCalibration" ValueChanged="(MethodeCalibrationRetenue s)=>ChangeSelectionMethod(s)">
                            @foreach (var item in Enum.GetValues(typeof(MethodeCalibrationRetenue)))
                            {
                                <option value="@item">@item</option>
                            }
                            )
                        </InputSelect>
                        @if (DonneesImportes.ActualData.MethodeCalibration == MethodeCalibrationRetenue.Manuelle)
                        {
                            <InputSelect class="form-select form-select-lg" ValueExpression="@(()=>DonneesImportes.ActualData.CalibratedTypeDistribution)" Value="@DonneesImportes.ActualData.CalibratedTypeDistribution" ValueChanged="(TypeDistribution? s)=>{DonneesImportes.ActualData.CalibratedTypeDistribution=s; UpdateChart();}">
                                @foreach (var item in DonneesImportes.ActualData.VisisbleData.Select(a => a.Distribution))
                                {
                                    <option value="@item.Type">@item.Type</option>
                                }
                                )
                            </InputSelect>
                        }
                        <div>
                            @DonneesImportes.ActualData.CalibratedDistribution?.Type
                        </div>
                        <ul>
                            @foreach (var item in DonneesImportes.ActualData.CalibratedDistribution?.AllParameters())
                            {
                                <li>@item.Name : @item.Value</li>
                            }
                        </ul>
                        <div> QQPlot </div>
                        <CartesianChart Series="QQPlot.Series" DrawMarginFrame="QQPlot.DrawMarginFrame" />
                    }
                </div>
            </div>
        </div>
    }
    <div class="col-xl-12">
        <div class="card">
            <div class="card-header">
                Tests stratistiques
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>

                    <th>Loi</th>
                    <th>LogLikelihood</th>
                    <th>AIC</th>
                    <th>BIC</th>
                        @for (int i = 0; i < distributions.Max(a => a.Distribution.AllParameters().Count()); i++)
                        {
                        <th>Parametre @(i + 1)</th>
                        }
                    </thead>
                    <tbody>
                        @if (distributions != null)
                        {
                            @foreach (var test in distributions)
                            {
                                <tr>
                                    <td>@test.Distribution.Type</td>
                                    <td>@test.LogLikelihood.ToString("F4")</td>
                                    <td>@test.AIC.ToString("F4")</td>
                                    <td>@test.BIC.ToString("F4")</td>
                                    @for (int i = 0; i < distributions.Max(a => a.Distribution.AllParameters().Count()); i++)
                                    {
                                        if (i < test.Distribution.AllParameters().Count())
                                        {
                                            <td>@test.Distribution.AllParameters().ElementAt(i).ToString()</td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                    }
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>


@code {
    private bool isInit;
    private List<DistributionWithDatas>? distributions;
    private DonneesImportes? DonneesImportes;
    private ChartViewModelLine? QQPlot;
    protected override async void OnInitialized()
    {

        DonneesImportes = donneeContainer.Value;
        if (DonneesImportes.ActualData != null)
        {
            distributions = DonneesImportes.ActualData?.GetAllDistributions();
            isInit = true;
            ChangeSelectionMethod(DonneesImportes.ActualData.MethodeCalibration);
            donneeContainer.SetValue(DonneesImportes);
            StateHasChanged();
        }
    }

    protected void UpdateCalibration(ChangeEventArgs e, bool isTrunkated)
    {
        if (isTrunkated)
        {
            DonneesImportes.ActualData.IncludeTrunkatedDistributions = (bool)e.Value;
        }
        else
        {
            DonneesImportes.ActualData.IsDiscreteDistribution = (bool)e.Value;
        }
        if (isInit)
        {
            distributions = DonneesImportes.ActualData?.GetAllDistributions();
            ChangeSelectionMethod(DonneesImportes.ActualData.MethodeCalibration);
            UpdateChart();
            donneeContainer.SetValue(DonneesImportes);

        }
    }

    protected void ChangeSelectionMethod(MethodeCalibrationRetenue m)
    {
        DonneesImportes.ActualData?.ChangeSelectionMethod(m);
        UpdateChart();
        donneeContainer.SetValue(DonneesImportes);

    }
    public async void UpdateChart()
    {

        QQPlot = new ChartViewModelLine(
    DonneesImportes.ActualData?.GetQQPlot(),
    new List<Paint>() { new SolidColorPaint(SKColors.CornflowerBlue), new SolidColorPaint(SKColors.IndianRed) },
    new List<Paint>() { null, null });
        StateHasChanged();
    }


}