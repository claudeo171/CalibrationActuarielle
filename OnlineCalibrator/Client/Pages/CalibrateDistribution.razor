@using LiveChartsCore.SkiaSharpView.Blazor;
@using Newtonsoft.Json;
@using OnlineCalibrator.Shared;
@using System
@using System.IO
@using System.Text.RegularExpressions
@using Microsoft.Extensions.Logging
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@page "/CalibrateDistribution"

<nav class="navbar navbar-expand-lg navbar-light bg-light mynavbar" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/Import">Import des données</a></li>
        <li class="breadcrumb-item active">Calibration des données (@name)</li>
    </ol>
</nav>


<div class="card">
    <div class="card-header main-card-header">
        Calibrer la distribution d'une Variable Aléatoire
    </div>
    <div class="card-body row">
        @if (ChartCDF != null)
        {
            <div class="col-xl-6">
                <div class="card ">
                    <div class="card-header">
                        Fonction de répartition empirique
                    </div>
                    <div class="card-body divChart">
                        <CartesianChart Series="ChartCDF.Series" DrawMarginFrame="ChartCDF.DrawMarginFrame">
                        </CartesianChart>
                    </div>
                </div>
            </div>
        }
        @if (ChartKDE != null)
        {
            <div class="col-xl-6">
                <div class="card">
                    <div class="card-header">
                        Estimateur à noyau de la Densité
                    </div>
                    <div class="card-body divChart">
                        <CartesianChart Series="ChartKDE.Series" DrawMarginFrame="ChartKDE.DrawMarginFrame">
                        </CartesianChart>
                    </div>
                </div>
            </div>

        }
        @if (DonneesAAnalyser != null)
        {
            <div class="col-xl-6 col-sm-12">
                <div class="card">
                    <div class="card-header">
                        Caracteristiques Empiriques
                    </div>
                    <div class="card-body">
                        <ul>
                            <li> Moyenne : @DonneesAAnalyser.Moyenne </li>
                            <li> Variance : @DonneesAAnalyser.Variance </li>
                            <li> Skewness : @DonneesAAnalyser.Skewness </li>
                            <li> Kurtosis : @DonneesAAnalyser.Kurtosis </li>
                        </ul>
                    </div>
                </div>
            </div>
        }
        <div class="col-xl-6 col-sm-12">
            <div class="card">
                <div class="card-header">
                    Caracteristiques
                </div>
                <div class="card-body">
                    <a class="btn btn-primary" href="/TestNormalite"> Etude de la normalité </a>
                </div>
            </div>

        </div>
    </div>
</div>
@code {
    private ChartViewModelLine ChartCDF;
    private ChartViewModelLine ChartKDE;
    private DonneesImportes? DonneesImportes;
    private DonneesAAnalyser? DonneesAAnalyser;
    private string name;
    protected override async void OnInitialized()
    {
        try
        {
            var json = await sessionStorage.GetItemAsync<string>("donnees");
            DonneesImportes = JsonConvert.DeserializeObject<DonneesImportes>(json);
            name = await sessionStorage.GetItemAsync<string>("dataToAnalyse");
            DonneesAAnalyser = DonneesImportes?.Donnees.FirstOrDefault(a => a.Name == name);
            if (DonneesAAnalyser != null)
            {
                ChartKDE = new ChartViewModelLine(DonneesAAnalyser.PointsKDE);
                ChartCDF = new ChartViewModelLine(DonneesAAnalyser.PointsCDF);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
