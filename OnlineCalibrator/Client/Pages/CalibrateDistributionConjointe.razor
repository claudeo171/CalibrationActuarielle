@using LiveChartsCore.SkiaSharpView.Blazor;
@using Newtonsoft.Json;
@using OnlineCalibrator.Service
@using OnlineCalibrator.Shared;
@using System
@using System.IO
@using System.Text.RegularExpressions
@using Microsoft.Extensions.Logging
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject DonneeContainer donneeContainer
@page "/CalibrateDistributionConjointe"

@if (DonneesImportes != null)
{
    <nav class="navbar navbar-expand-lg navbar-light bg-light mynavbar" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/Import">Import des données</a></li>
            <li class="breadcrumb-item active">Calibration des données conjointe (@DonneesImportes.NomDataConjointe1 - @DonneesImportes.NomDataConjointe2)</li>
        </ol>
    </nav>


    <div class="card">
        <div class="card-header main-card-header">
            Calibrer de la distribution conjointe de deux Variables Aléatoires
        </div>
        <div class="card-body row">
            @if (ChartScatterPlot != null)
            {
                <div class="col-xl-6">
                    <div class="card ">
                        <div class="card-header">
                            Nuage de points
                        </div>
                        <div class="card-body divChart">
                            <CartesianChart Series="ChartScatterPlot.Series" DrawMarginFrame="ChartScatterPlot.DrawMarginFrame">
                            </CartesianChart>
                        </div>
                    </div>
                </div>
            }
            @if (ChartScatterPlotRank != null)
            {
                <div class="col-xl-6">
                    <div class="card">
                        <div class="card-header">
                            Nuage de points des rangs
                        </div>
                        <div class="card-body divChart">
                            <CartesianChart Series="ChartScatterPlotRank.Series" DrawMarginFrame="ChartScatterPlotRank.DrawMarginFrame">
                            </CartesianChart>
                        </div>
                    </div>
                </div>
            }
            <div class="col-xl-6 col-sm-12">
                <div class="card">
                    <div class="card-header">
                        Caracteristiques Empiriques
                    </div>
                    <div class="card-body">
                        <ul>
                            <li> Correlation : @DonneesImportes.ActualDonneesPourAnalyseConjointe.Correlation.ToBeautifulString() </li>
                            <li> Correlation des rang : @DonneesImportes.ActualDonneesPourAnalyseConjointe.RankCorrelation.ToBeautifulString() </li>
                            <li data-toggle="tooltip" data-html="true" title="Réalisation d'un test de fisher'"> P-Value Significativité correlation : @DonneesImportes.ActualData.Skewness.ToBeautifulString() </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="col-xl-6 col-sm-12">
                <div class="card">
                    <div class="card-header">
                        Etudes
                    </div>
                    <div class="card-body">
                        <a class="btn btn-primary" href="/AnalyseCopula"> Etude de la dépendance via Copules </a>
                    </div>
                </div>

            </div>
        </div>
    </div>
}

@code {
    private ChartViewModelScatter ChartScatterPlot;
    private ChartViewModelScatter ChartScatterPlotRank;
    private DonneesImportes? DonneesImportes;
    protected override async void OnInitialized()
    {
        try
        {
            if (donneeContainer.Value != null)
            {
                DonneesImportes = donneeContainer.Value;
            }
            else
            {
                var data = await sessionStorage.GetItemAsStringAsync("donneesImportes");
                DonneesImportes = DonneesImportes.FromMsgPack(Convert.FromBase64String(data));
            }

            if (DonneesImportes != null && DonneesImportes.ActualData != null)
            {
                ChartScatterPlot = new ChartViewModelScatter(DonneesImportes.ActualDonneesPourAnalyseConjointe.ScatterPlot);
                ChartScatterPlotRank = new ChartViewModelScatter(DonneesImportes.ActualDonneesPourAnalyseConjointe.ScatterPlotRank);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
