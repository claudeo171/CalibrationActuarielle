
@using LiveChartsCore.SkiaSharpView.Blazor;
@using Newtonsoft.Json;
@using OnlineCalibrator.Shared;
@using System
@using System.IO
@using System.Text.RegularExpressions
@using Microsoft.Extensions.Logging
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@page "/Import"
<PageTitle>Selectionnez vos données</PageTitle>

<InputFile OnChange="@LoadFiles">Selectionner votre jeu de données</InputFile>
@if (DonneesImportes != null)
{
    <select @bind="nameData">
        @foreach (var forecast in DonneesImportes.Donnees)
        {
            <option value="@forecast.Name">@forecast.Name</option>
        }
    </select>
    <button class="btn btn-primary"  @onclick="@CalibrerDonne">Calibrer la donnée</button>
    <table class="table">
        <thead>
            <tr>
                @foreach (var forecast in DonneesImportes.Donnees)
                {
                <th>@forecast.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @for (int i=0;i<(DonneesImportes.Donnees.FirstOrDefault()?.Values.Length??0);i++)
            {
                <tr>
                    @foreach (var forecast in DonneesImportes.Donnees)
                    {
                        <td>@forecast.Values[i]</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

<h1>Counter</h1>
<p role="status">Current count: @currentCount</p>


@code {
    private int currentCount = 0;
    private string nameData;
    private DonneesImportes DonneesImportes;
    public async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var singleFile = e.File;

        Regex regex = new Regex(".+\\.csv", RegexOptions.Compiled);
        if (!regex.IsMatch(singleFile.Name))
        {
            //show error invalidad format file
        }
        else
        {
            var stream = singleFile.OpenReadStream(20000000);
            var donneesImportes =new DonneesImportes { Donnees=new List<DonneesAAnalyser>() };
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();
            var outputFileString = System.Text.Encoding.UTF8.GetString(ms.ToArray());
            int index = 0;
            var lignes = outputFileString.Split(Environment.NewLine);
            foreach (var item in lignes)
            {
                if (item != string.Empty)
                {
                    if (index == 0)
                    {
                        foreach (var header in SplitCSV(item.ToString()))
                        {
                            donneesImportes.Donnees.Add(new DonneesAAnalyser { Name = header, Values = new double[lignes.Count(a=>a!=string.Empty) - 1] });
                        }
                    }
                    else
                    {
                        var colonnes = SplitCSV(item.ToString());
                        for (int i = 0; i < colonnes.Length; i++)
                        {
                            donneesImportes.Donnees[i].Values[index - 1] = Convert.ToDouble(colonnes[i]);
                        }
                    }
                }
                index++;
            }
            DonneesImportes = donneesImportes;
            foreach(var v in DonneesImportes.Donnees)
            {
                v.Initialize();
            }
            string json = JsonConvert.SerializeObject(DonneesImportes);
            await sessionStorage.SetItemAsync<string>("donnees", json);
        }
    }

    private string[] SplitCSV(string input)
    {
        return input.Split(';');
    }
    private void CalibrerDonne()
    {
        sessionStorage.SetItemAsync<string>("dataToAnalyse", nameData);
        NavManager.NavigateTo("/CalibrateDistribution");
    }
}
