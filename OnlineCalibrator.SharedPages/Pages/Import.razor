@using OnlineCalibrator.Shared;
@using System
@using System.IO
@using System.Text.RegularExpressions
@using Microsoft.Extensions.Logging
@using System.Text;
@using OnlineCalibrator.Service;

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject IJSRuntime js
@inject DonneeContainer donneeContainer
@page "/Import"
<PageTitle>Selectionnez vos données</PageTitle>

<nav class="navbar navbar-expand-lg navbar-light bg-light mynavbar" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item active">Import des données</li>
    </ol>
</nav>

<div class="card">
    <div class="card-header main-card-header">
        Importez vos données
    </div>
    <div class="card-body">
        <div class="row">
            <div class="@(DonneesImportes == null?"col-12":"col-lg-6")">
                <div class="card">
                    <div class="card-header">
                        Selection de la donnée
                    </div>
                    <div class="card-body">
                        <label class="btn btn-primary  mx-0">
                            Selectionner votre jeu de données
                            <InputFile class="visually-hidden" accept=".csv" OnChange="@LoadFiles"></InputFile>

                        </label>
                        <button type="button" class="btn btn-info mx-1" data-toggle="modal" data-target="#exampleModalLong" @onclick="@ShowModal">
                            Format de l'import
                        </button>
                        @if (DonneesImportes != null)
                        {
                            <button class="btn btn-danger mx-1" @onclick="@SupprimerDonnee">Supprimer Données</button>
                        }

                        <!-- Modal -->
                        <div class="modal @(showModal?"":"fade")" style="@(showModal?"display: block;padding-right: 17px;":"display: none;")" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="exampleModalLongTitle">Format du fichier d'import</h5>
                                        <button type="button" class="btn btn-close" data-dismiss="modal" @onclick="@ShowModal" aria-label="Close">
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        Le format du fichier d'import doit être le suivant soit un fichier que vous avez précédement télécharger dans l'outil ou bien un csv au format suivant (nom de la variable sur la première ligne) : <br />
                                        <img src="Content/Image/FormatImport.png" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @if (DonneesImportes != null)
                {
                    <div class="card">
                        <div class="card-header">
                            Sauvegarde et export
                        </div>
                        <div class="card-body">
                            <button class="btn btn-outline-primary" @onclick="@SauvegarderDonnee">Sauvegarder Données</button>
                            <button class="btn btn-outline-primary" @onclick="@ExporterWord">Rapport de calibration</button>
                        </div>
                    </div>
                }
            </div>


            @if (DonneesImportes != null)
            {

                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-header">
                            Calibration de la distribution
                        </div>
                        <div class="card-body">
                            <div class="row m-1">
                                <label>Selectionnez la colonne à calibrer pour un calibration individuelle.</label>
                                <select class="mt-1" @onchange="(ChangeEventArgs a)=>ChangeData(a)">
                                    @foreach (var donnee in DonneesImportes.Donnees)
                                    {
                                        @if (DonneesImportes.NomData!="" && donnee.Name == DonneesImportes.NomData)
                                        {
                                            <option selected value="@donnee.Name">@donnee.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@donnee.Name">@donnee.Name</option>
                                        }
                                    }
                                </select>
                                <button class="btn btn-primary mt-1" @onclick="@CalibrerDonne">Calibrer la donnée</button>
                            </div>

                        </div>
                    </div>
                    @if (DonneesImportes.Donnees.Count > 1)
                    {
                        <div class="card">
                            <div class="card-header">
                                Calibration des dépendances
                            </div>
                            <div class="card-body">
                                <div class="row m-1">
                                    <label>Selectionnez les colonnes à calibrer pour la calibration des dépendances entre variables.</label>
                                    <select class="mt-1" @onchange="(ChangeEventArgs a)=>ChangeDataConjointe1(a)">
                                        @foreach (var donnee in DonneesImportes.Donnees)
                                        {
                                            @if (DonneesImportes.NomDataConjointe1 != "" && donnee.Name == DonneesImportes.NomDataConjointe1)
                                            {
                                                <option selected value="@donnee.Name">@donnee.Name</option>
                                            }
                                            else
                                            {
                                                <option value="@donnee.Name">@donnee.Name</option>
                                            }
                                        }
                                    </select>
                                    <select class="mt-1" @onchange="(ChangeEventArgs a)=>ChangeDataConjointe2(a)">
                                        @foreach (var donnee in DonneesImportes.Donnees)
                                        {
                                            @if (DonneesImportes.NomDataConjointe2 != "" && donnee.Name == DonneesImportes.NomDataConjointe2 || DonneesImportes.NomDataConjointe2=="" && donnee==DonneesImportes.Donnees[1] )
                                            {
                                                <option selected value="@donnee.Name">@donnee.Name</option>
                                            }
                                            else
                                            {
                                                <option value="@donnee.Name">@donnee.Name</option>
                                            }
                                        }
                                    </select>
                                    <button class="btn btn-primary mt-1" @onclick="@CalibrerDonneConjointe">Calibrer la dépendance entre les données</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="accordion" id="accordionExample">
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="headingOne">
                                    <button @onclick="@ShowAcordion" class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                        Données importées
                                    </button>
                                </h2>
                                <div class="accordion-body">

                                    <div id="collapseOne" class="accordion-collapse collapse @(showAcordion?"show":"")" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                                        <div class="table-responsive text-nowrap">
                                            <table class="table">
                                                <thead>
                                                    <tr>
                                                        @foreach (var forecast in DonneesImportes.Donnees)
                                                        {
                                                            <th>@forecast.Name</th>
                                                        }
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @for (int i = 0; i < (DonneesImportes.Donnees.FirstOrDefault()?.Values.Length ?? 0); i++)
                                                    {
                                                        <tr>
                                                            @foreach (var forecast in DonneesImportes.Donnees)
                                                            {
                                                                <td>@forecast.Values[i]</td>
                                                            }
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<div class="toast-container position-absolute p-3 bottom-0 end-0">
    @foreach (var error in Errors)
    {
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false">
            <div class="toast-header">
                <iconify-icon icon="oi:warning" class="text-warning"></iconify-icon>
                <strong class="me-auto">Erreur</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" @onclick="@(()=>SuppressionErreur(error))" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                @error
            </div>
        </div>
    }
</div>

@code {
    private DonneesImportes DonneesImportes;
    private bool showAcordion = true;
    private bool showModal = false;
    private List<string> Errors = new List<string>();
    public async Task LoadFiles(InputFileChangeEventArgs e)
    {
        SupprimerDonnee();
        var singleFile = e.File;
        var stream = singleFile.OpenReadStream(20000000);
        MemoryStream ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        stream.Close();
        try
        {
            DonneesImportes = FileService.GetDataFromFile(ms, e.File.Name);
            DonneesImportes.NomDataConjointe1 = DonneesImportes.Donnees.FirstOrDefault()?.Name;
            DonneesImportes.NomDataConjointe2 = DonneesImportes.Donnees.Skip(1).FirstOrDefault()?.Name;
            SaveData();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Errors.Add(ex.Message);
        }


    }

    public void ChangeData(ChangeEventArgs e)
    {
        DonneesImportes.NomData = e.Value.ToString();
    }
    public void ChangeDataConjointe1(ChangeEventArgs e)
    {
        DonneesImportes.NomDataConjointe1 = e.Value.ToString();
    }
    public void ChangeDataConjointe2(ChangeEventArgs e)
    {
        DonneesImportes.NomDataConjointe2 = e.Value.ToString();
    }

    protected override async void OnInitialized()
    {
        if (donneeContainer.Value != null)
        {
            DonneesImportes = donneeContainer.Value;
        }
        else if (await sessionStorage.ContainKeyAsync("donneesImportes"))
        {

            var data = await sessionStorage.GetItemAsStringAsync("donneesImportes");
            DonneesImportes = DonneesImportes.FromMsgPack(Convert.FromBase64String(data));
        }
        StateHasChanged();
    }

    private async void SaveData()
    {
        donneeContainer.SetValue(DonneesImportes);
        await sessionStorage.SetItemAsStringAsync("donneesImportes", Convert.ToBase64String(DonneesImportes.ToMsgPack()));
    }

    private void CalibrerDonne()
    {
        SaveData();
        NavManager.NavigateTo("/CalibrateDistribution");
    }

    private void CalibrerDonneConjointe()
    {
        SaveData();
        NavManager.NavigateTo("/CalibrateDistributionConjointe");
    }

    private void ShowAcordion()
    {
        showAcordion = !showAcordion;
    }
    private void ShowModal()
    {
        showModal = !showModal;
    }

    private void SupprimerDonnee()
    {
        DonneesImportes = null;
        sessionStorage.RemoveItemAsync("donneesImportes");
    }

    private async void SauvegarderDonnee()
    {

        var fileStream = new MemoryStream(DonneesImportes.ToMsgPack());
        var fileName = "test.data";
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await js.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async void ExporterWord()
    {
        var fileStream = new MemoryStream(new FileService().ExportFileDocx(DonneesImportes));
        var fileName = "test.docx";
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await js.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }


    private void SuppressionErreur(string error)
    {
        Errors.Remove(error);
    }
}
