@using OnlineCalibrator.Service
@using OnlineCalibrator.Shared;
@using System
@using System.IO
@using System.Text.RegularExpressions
@using Microsoft.Extensions.Logging
@using Stochastique
@using pax.BlazorChartJs
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject DonneeContainer donneeContainer
@page "/CalibrateDistribution"

<ModalChart @ref="modal" />
@if (DonneesImportes != null)
{
    <nav class="navbar navbar-expand-lg navbar-light bg-light mynavbar" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/Import">Import des données</a></li>
            <li class="breadcrumb-item active">Calibration des données (@DonneesImportes.NomData)</li>
        </ol>
    </nav>
}

<div class="card">
    <div class="card-header main-card-header">
        Calibrer la distribution d'une Variable Aléatoire
    </div>
    <div class="card-body row">
        @if (ChartCDF != null)
        {
            <div class="col-xl-6">
                <div class="card ">
                    <div class="card-header">
                        Fonction de répartition empirique
                    </div>
                    <div class="card-body">
                        <div class="chart-container500">
                            <ChartComponent  @ref="c2" ChartJsConfig="ChartCDF.ChartJsConfig">
                            </ChartComponent>
                        </div>
                    </div>
                </div>
            </div>
        }
        @if (ChartKDE != null)
        {
            <div class="col-xl-6">
                <div class="card">
                    <div class="card-header">
                        Estimateur à noyau de la Densité
                    </div>
                    <div class="card-body">
                        <div class="chart-container500">
                            <ChartComponent  @ref="c1" ChartJsConfig="ChartKDE.ChartJsConfig">
                            </ChartComponent>
                        </div>
                    </div>
                </div>
            </div>

        }
        @if (DonneesImportes.ActualData != null)
        {
            <div class="col-xl-6 col-sm-12">
                <div class="card">
                    <div class="card-header">
                        Caracteristiques Empiriques
                    </div>
                    <div class="card-body">
                        <ul>
                            <li> Moyenne : @DonneesImportes.ActualData.Moyenne.ToBeautifulString() </li>
                            <li> Variance : @DonneesImportes.ActualData.Variance.ToBeautifulString() </li>
                            <li> Skewness : @DonneesImportes.ActualData.Skewness.ToBeautifulString() </li>
                            <li> Kurtosis : @DonneesImportes.ActualData.Kurtosis.ToBeautifulString() </li>
                        </ul>
                    </div>
                </div>
            </div>
        }
        <div class="col-xl-6 col-sm-12">
            <div class="card">
                <div class="card-header">
                    Etudes
                </div>
                <div class="card-body">
                    <a class="btn btn-primary" href="/TestNormalite"> Etude de la normalité </a>
                    <a class="btn btn-primary" href="/AnalyseDistribution"> Etude de la distribution </a>
                </div>
            </div>

        </div>
    </div>
</div>
@code {
    private ModalChart modal;
    private ChartComponent c1;
    private ChartComponent c2;
    private ChartViewModelLine ChartCDF;
    private ChartViewModelLine ChartKDE;
    private DonneesImportes? DonneesImportes;
    protected override async void OnInitialized()
    {
        try
        {
            if (donneeContainer.Value != null)
            {
                DonneesImportes = donneeContainer.Value;
            }
            else
            {
                var data = await sessionStorage.GetItemAsStringAsync("donneesImportes");
                DonneesImportes = DonneesImportes.FromMsgPack(Convert.FromBase64String(data));
            }

            if (DonneesImportes != null && DonneesImportes.ActualData != null)
            {
                ChartKDE = new ChartViewModelLine(DonneesImportes.ActualData.PointsKDE);
                ChartCDF = new ChartViewModelLine(DonneesImportes.ActualData.PointsCDF);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        c1.Modal = modal;
        c2.Modal = modal;
    }
}

