@using Newtonsoft.Json;
@using OnlineCalibrator.Service
@using OnlineCalibrator.Shared;
@using System
@using System.Text
@using System.IO
@using System.Text.RegularExpressions
@using Microsoft.Extensions.Logging
@using OnlineCalibrator.SharedPages.ViewModel
@using SkiaSharp;
@using SpawnDev.BlazorJS.WebWorkers
@using Stochastique.Distributions
@using Stochastique.Enums;
@using Stochastique;
@using LiveChartsCore.SkiaSharpView.Painting;
@using Stochastique.Test
@using pax.BlazorChartJs
@using OnlineCalibrator.Shared.MachineLearning

@inject NavigationManager NavManager
@inject IJSRuntime js
@inject DonneeContainer donneeContainer
@inherits BasePage
@page "/AnalyseDistribution"
<ModalChart @ref="modal" />
<nav class="navbar navbar-expand-lg navbar-light bg-light mynavbar" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/Import">Import des données</a></li>
        @if (DonneesImportes != null)
        {
            <li class="breadcrumb-item"><a href="/CalibrateDistribution">Calibration des données (@DonneesImportes.NomData)</a></li>
        }
        else
        {
            <li class="breadcrumb-item"><a href="/CalibrateDistribution">Calibration des données </a></li>
        }
        <li class="breadcrumb-item active">Identification de la loi</li>
    </ol>
</nav>

<div class="row">
    @if (DonneesImportes != null)
    {
        <div class="col-6 col-sm-12 col-xl-6 align-items-stretch">
            <div class="card">
                <div class="card-header">
                    Paramétrage de la calibration
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label>
                            Valeur Minimale distribution tronquée
                        </label>
                        <InputNumber class="form-control" @bind-value="DonneesImportes.ActualData.ValeurMinTrukated" />
                    </div>
                    <div class="form-group">
                        <label>
                            Valeur Maximale distribution tronquée
                        </label>
                        <InputNumber class="form-control" @bind-value="DonneesImportes.ActualData.ValeurMaxTrukated" />
                    </div>
                    @if (DonneesImportes.ActualData.IncludeTrunkatedDistributions)
                    {
                        <button class="btn btn-primary" @onclick="()=>DonneesImportes.ActualData.MajCalibrationTronque()">MAJ Calibration distribution Tronquées</button>
                    }
                    else
                    {
                        <button class="btn btn-primary" @onclick="()=>IncludeTrunkatedDistribution()">Inclure Distributions Tronquées</button>
                    }
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="flexCheckDefault" @onchange="(ChangeEventArgs e) => UpdateCalibration((bool)e.Value,false)" checked=@(DonneesImportes.ActualData.IsDiscreteDistribution) />
                        <label class="form-check-label" for="flexCheckDefault">
                            Distributions discrètes?
                        </label>
                    </div>
                    <div>
                        <label class="form-select-label">
                            Méthode de selection de loi:
                        </label>
                        @if (DonneesImportes.ActualData != null && DonneesImportes.ActualData.CalibratedDistribution != null)
                        {
                            <InputSelect class="form-select form-select-lg" ValueExpression="@(()=>DonneesImportes.ActualData.MethodeCalibration)" Value="@DonneesImportes.ActualData.MethodeCalibration" ValueChanged="(MethodeCalibrationRetenue s)=>ChangeSelectionMethod(s,true)">
                                @foreach (var item in AviableMethod)
                                {
                                    <option value="@item">@item</option>
                                }
                                )
                            </InputSelect>
                            @if (DonneesImportes.ActualData.MethodeCalibration == MethodeCalibrationRetenue.Manuelle)
                            {
                                <InputSelect class="form-select form-select-lg" ValueExpression="@(()=>DonneesImportes.ActualData.CalibratedTypeDistribution)" Value="@DonneesImportes.ActualData.CalibratedTypeDistribution" ValueChanged="(TypeDistribution? s)=>{DonneesImportes.ActualData.CalibratedTypeDistribution=s; UpdateChart();}">
                                    @foreach (var item in DonneesImportes.ActualData.VisisbleData.Select(a => a.Distribution))
                                    {
                                        <option value="@item.Type">@item.Type</option>
                                    }
                                    )
                                </InputSelect>
                            }
                            <div class="pt-3">
                                <h5 class="fw-bold">
                                    @DonneesImportes.ActualData.CalibratedDistribution?.Type
                                </h5>
                            </div>
                            <ul>
                                @foreach (var item in DonneesImportes.ActualData.CalibratedDistribution?.AllParameters())
                                {
                                    <li>@item.Name : @item.Value</li>
                                }
                            </ul>
                        }
                    </div>
                    @if (DonneesImportes.ActualData != null && DonneesImportes.ActualData.CalibratedDistribution != null)
                    {

                        <h5> PDF + CDF </h5>
                        <div class="chart-container300">
                            <ChartComponent @ref="c1" ChartJsConfig="PDFCDF.ChartJsConfig">
                            </ChartComponent>
                        </div>
                        <CartesianChart Series="PDFCDF.Series" DrawMarginFrame="PDFCDF.DrawMarginFrame" YAxes="PDFCDF.YAxes" />

                        <h5>Probability of Quantile Plot</h5>
                        <div class="chart-container300">
                            <ChartComponent @ref="c2" ChartJsConfig="QuantileBeta.ChartJsConfig">
                            </ChartComponent>
                        </div>

                        @if (DonneesImportes.ActualData.CurrentDistribution.EELQuantileTest == null)
                        {
                            <button class="btn btn-primary" @onclick="AddMonteCarlo">Ajouter le graphique de probabilité des quantiles au niveau global (EEL).</button>
                        }
                        else
                        {

                            <h5>Probabilité des quantiles au niveau gloabl (EEL)</h5>
                            <div class="chart-container300">
                                <ChartComponent @ref="c3" ChartJsConfig="QuantileEEL.ChartJsConfig">
                                </ChartComponent>
                            </div>

                        }

                    }
                </div>
            </div>
            <div class="card">
                <div class="card-header">
                    Simulation de la loi calibré (csv)
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label class="form-check-label">Nombre de ligne</label>
                        <InputNumber @bind-Value="@NbRow" />
                    </div>
                    <div class="form-group">
                        <label class="form-check-label">Nombre de colonne</label>
                        <InputNumber @bind-Value="@NbCol" />
                    </div>
                    <button class="btn btn-primary" @onclick="ExportSample">Exporter une simulation</button>
                </div>
            </div>
        </div>
        <div class="col-6 col-sm-12 col-xl-6 align-items-stretch">
            <div class="card">
                <div class="card-header">
                    Analyse de la loi sélectionnée
                </div>
                <div class="card-body">
                    @if (DonneesImportes.ActualData != null && DonneesImportes.ActualData.CalibratedDistribution != null)
                    {
                        <div>
                            QQPlot
                            <div class="chart-container300">
                                <ChartComponent @ref="c4" ChartJsConfig="QQPlot.ChartJsConfig">
                                </ChartComponent>
                            </div>
                        </div>
                    }
                    @if (DonneesImportes.ActualData != null && DonneesImportes.ActualData.CalibratedDistribution != null)
                    {
                        <div>
                            PPPlot
                            <div class="chart-container300">
                                <ChartComponent @ref="c5" ChartJsConfig="PPPlot.ChartJsConfig">
                                </ChartComponent>
                            </div>
                        </div>
                    }
                </div>
            </div>
            @if (EnvironementCalibration.EstMAUI)
            {
                <div class="card">
                    <div class="card-header">
                        Machine Learning
                    </div>
                    <div class="card-body">
                        @if (DonneesImportes.ActualData.ConfusionMatrixML == null)
                        {
                            <button class="btn btn-primary" @onclick="CalibrateMLI">Faire une calibration par reconnaissance d'image</button>
                        }
                        @if (ChartMatrixMachineLearning != null)
                        {
                            <div> Matrice de confusion Machine Learning </div>
                            <div class="chart-container300">
                                <ChartComponent @ref="c6" ChartJsConfig="ChartMatrixMachineLearning.ChartJsConfig">
                                </ChartComponent>
                            </div>
                            <label class="form-select-label">
                                Méthode de calibration comparé:
                            </label>
                            <InputSelect class="form-select form-select-lg" ValueExpression="@(()=>valeurMethodeAlternative)" Value="@valeurMethodeAlternative" ValueChanged="(MethodeCalibrationRetenue s)=>ChangeSelectionMethodComparaisonML(s,true)">
                                @foreach (var item in AviableMethodAlternative)
                                {
                                    <option value="@item">@item</option>
                                }
                                )
                            </InputSelect>
                            <div> Matrice de confusion Maximum Vraissemblance</div>
                            <div class="chart-container300">
                                <ChartComponent @ref="c7" ChartJsConfig="ChartMatrixMaximumVraissemblance.ChartJsConfig">
                                </ChartComponent>
                            </div>
                            <div> Matrice de confusion Ecart</div>
                            <div class="chart-container300">
                                <ChartComponent @ref="c8" ChartJsConfig="ChartMatrixEcart.ChartJsConfig">
                                </ChartComponent>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }

    @if (distributions != null)
    {
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    Métriques des lois calibrés
                </div>
                <div class="card-body" style="max-width:100%;">
                    <div class="table-responsive text-nowrap">
                        <table class="table">
                            <thead>

                                <th class="text-center">Loi</th>
                                <th class="text-center">LogLikelihood</th>
                                <th class="text-center">AIC</th>
                                <th class="text-center">BIC</th>
                                <th class="text-center">KS-Test P-Value</th>
                                @for (int i = 0; i < distributions.Max(a => a.Distribution.AllParameters().Count()); i++)
                                {
                                    <th class="text-center">Parametre @(i + 1)</th>
                                }
                                <th class="text-center">Esperance(%Ecart)</th>
                                <th class="text-center">Variance(%Ecart)</th>
                                <th class="text-center">Aplatissement(%Ecart)</th>
                                <th class="text-center">Kurtosis(%Ecart)</th>
                            </thead>
                            <tbody>
                                @if (distributions != null)
                                {
                                    @foreach (var distrib in distributions)
                                    {
                                        <tr>
                                            <td class="text-center">@distrib.Distribution.Type</td>
                                            <td>@distrib.LogLikelihood.ToBeautifulString()</td>
                                            <td>@distrib.AIC.ToBeautifulString()</td>
                                            <td>@distrib.BIC.ToBeautifulString()</td>
                                            <td>@distrib.TestStatistiques.FirstOrDefault(a => a.TypeTestStatistique == TypeTestStatistique.KolmogorovSmirnov)?.PValue.ToBeautifulString()</td>
                                            @for (int i = 0; i < distributions.Max(a => a.Distribution.AllParameters().Count()); i++)
                                            {
                                                if (i < distrib.Distribution.AllParameters().Count())
                                                {
                                                    if (distrib.Distribution.AllParameters().ElementAt(i).Name== ParametreName.valeurMin)
                                                    {
                                                        <td>@distrib.Distribution.AllParameters().ElementAt(i).ToString() (quantile = @((distrib.Distribution as TrunkatedDistribution).QuantileDown)</td>
                                                    }
                                                    else if (distrib.Distribution.AllParameters().ElementAt(i).Name == ParametreName.ValeurMax)
                                                    {
                                                        <td>@distrib.Distribution.AllParameters().ElementAt(i).ToString() (quantile = @((distrib.Distribution as TrunkatedDistribution).QuantileUp)</td>
                                                    }
                                                    else
                                                    {
                                                        <td>@distrib.Distribution.AllParameters().ElementAt(i).ToString()</td>
                                                    }
                                                }
                                                else
                                                {
                                                    <td></td>
                                                }
                                            }

                                            <td>@distrib.Distribution.ExpextedValue().ToBeautifulString() (@(((DonneesImportes.ActualData.Moyenne - @distrib.Distribution.ExpextedValue()) / Math.Max(DonneesImportes.ActualData.Moyenne, @distrib.Distribution.ExpextedValue())).ToBeautifulString(true)))</td>
                                            <td>@distrib.Distribution.Variance().ToBeautifulString() (@(((DonneesImportes.ActualData.Variance - @distrib.Distribution.Variance()) / Math.Max(DonneesImportes.ActualData.Variance, @distrib.Distribution.Variance())).ToBeautifulString(true)))</td>
                                            <td>@distrib.Distribution.Skewness().ToBeautifulString() (@(((DonneesImportes.ActualData.Skewness - @distrib.Distribution.Skewness()) / Math.Max(DonneesImportes.ActualData.Skewness, @distrib.Distribution.Skewness())).ToBeautifulString(true)))</td>
                                            <td>@distrib.Distribution.Kurtosis().ToBeautifulString() (@(((DonneesImportes.ActualData.Kurtosis - @distrib.Distribution.Kurtosis()) / Math.Max(DonneesImportes.ActualData.Kurtosis, @distrib.Distribution.Kurtosis())).ToBeautifulString(true)))</td>

                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<div class="toast-container position-absolute p-3 bottom-0 end-0">
    @foreach (var error in Notifications)
    {
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false">
            <div class="toast-header">
                <iconify-icon icon="oi:info" class="text-info"></iconify-icon>
                <strong class="me-auto">Erreur</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" @onclick="@(()=>SuppressionNotification(error))" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                @error
            </div>
        </div>
    }

</div>




@code {
    private bool isInit;
    private List<MethodeCalibrationRetenue> AviableMethod = new List<MethodeCalibrationRetenue> { MethodeCalibrationRetenue.Vraisemblance, MethodeCalibrationRetenue.AIC, MethodeCalibrationRetenue.BIC, MethodeCalibrationRetenue.KSTest, MethodeCalibrationRetenue.Manuelle };
    private List<DistributionWithDatas>? distributions;
    private DonneesImportes? DonneesImportes;
    private ChartViewModelLine? QQPlot;
    private ChartViewModelLine? PPPlot;
    private ChartViewModelLine? PDFCDF;
    private ChartViewModelLine? QuantileEEL;
    private ChartViewModelLine? QuantileBeta;
    private ChartMatrixViewModel? ChartMatrixMachineLearning;
    private ChartMatrixViewModel? ChartMatrixMaximumVraissemblance;
    private ChartMatrixViewModel? ChartMatrixEcart;
    public ChartComponent quntileEELChart;
    private MethodeCalibrationRetenue valeurMethodeAlternative;
    private List<MethodeCalibrationRetenue> AviableMethodAlternative = new List<MethodeCalibrationRetenue> { MethodeCalibrationRetenue.Vraisemblance, MethodeCalibrationRetenue.AIC, MethodeCalibrationRetenue.BIC };
    private ChartViewModelLine? CurrentFullSizeChart;
    private bool showModal;
    private List<string> Notifications = new List<string>();
    private int NbRow = 1000;
    private int NbCol = 10;
    protected override async void OnInitialized()
    {
        if (donneeContainer.Value != null)
        {
            DonneesImportes = donneeContainer.Value;
        }
        else
        {
            var data =  await GetData("donneesImportes");
            DonneesImportes = DonneesImportes.FromMsgPack(data);
        }
        if (DonneesImportes.ActualData != null)
        {
            distributions = DonneesImportes.ActualData?.GetAllDistributions();
            isInit = true;
            ChangeSelectionMethod(DonneesImportes.ActualData.MethodeCalibration, true);
            SaveData();
            StateHasChanged();
            if (DonneesImportes.ActualData.ConfusionMatrixML != null)
            {
                AviableMethod.Add(MethodeCalibrationRetenue.MachineLearningImage);
            }
        }
    }

    private async void SaveData()
    {
        donneeContainer.SetValue(DonneesImportes);
        var data = DonneesImportes.ToMsgPack();
        SaveData("donneesImportes", data);
    }

    protected void UpdateCalibration(bool b, bool isTrunkated)
    {
        if (isTrunkated)
        {
            DonneesImportes.ActualData.IncludeTrunkatedDistributions = b;
        }
        else
        {
            DonneesImportes.ActualData.IsDiscreteDistribution = b;
        }
        if (isInit)
        {
            distributions = DonneesImportes.ActualData?.GetAllDistributions();
            ChangeSelectionMethod(DonneesImportes.ActualData.MethodeCalibration, false);
            UpdateChart();
            SaveData();

        }
    }

    protected void ChangeSelectionMethod(MethodeCalibrationRetenue m, bool update)
    {
        DonneesImportes.ActualData?.ChangeSelectionMethod(m);
        if (update)
        {
            UpdateChart();
            SaveData();
        }
    }
    protected void ChangeSelectionMethodComparaisonML(MethodeCalibrationRetenue m, bool update)
    {
        valeurMethodeAlternative = m;
        double[][] val = null;
        if(m == MethodeCalibrationRetenue.Vraisemblance)
        {
            val = DonneesImportes.ActualData.ConfusionMatrixMaximumVraissemblance;
        }
        else if(m == MethodeCalibrationRetenue.AIC)
        {
            val = DonneesImportes.ActualData.ConfusionMatrixMaximumVraissemblanceAIC;
        }
        else
        {
            val = DonneesImportes.ActualData.ConfusionMatrixMaximumVraissemblanceBIC;
        }
        ChartMatrixMaximumVraissemblance.UpdateData(val, DonneesImportes.ActualData.Distributions.Select(a => a.Distribution.Type.ToString()).ToList());
        ChartMatrixEcart.UpdateData(DonneesImportes.ActualData.ConfusionMatrixML.Moins(val), DonneesImportes.ActualData.Distributions.Select(a => a.Distribution.Type.ToString()).ToList());
        ChartMatrixMaximumVraissemblance.ChartJsConfig.ReinitializeChart();
        ChartMatrixEcart.ChartJsConfig.ReinitializeChart();
        
    }
    public async void UpdateChart()
    {
        if (DonneesImportes.ActualData.ConfusionMatrixML != null && ChartMatrixMachineLearning == null)
        {
            GraphiqueMachineLearning();
        }
        if (QQPlot == null)
        {
            QQPlot = new ChartViewModelLine(
            DonneesImportes.ActualData?.GetQQPlot(),
            new List<SolidColorPaint>() { new SolidColorPaint(SKColors.CornflowerBlue, 5), new SolidColorPaint(SKColors.IndianRed, 5) },
            new List<SolidColorPaint>() { null, null },
            new List<double>() { 0, 0 }, new List<SolidColorPaint>() { null, null });
            PPPlot = new ChartViewModelLine(
            DonneesImportes.ActualData?.GetPPPlot(),
            new List<SolidColorPaint>() { new SolidColorPaint(SKColors.CornflowerBlue, 5), new SolidColorPaint(SKColors.IndianRed, 5) },
            new List<SolidColorPaint>() { null, null },
            new List<double>() { 0, 0 }, new List<SolidColorPaint>() { null, null });
            PDFCDF = new ChartViewModelLine(
                DonneesImportes.ActualData?.GetCDFPDF(),
                new List<SolidColorPaint>() { new SolidColorPaint(SKColors.CornflowerBlue, 5), new SolidColorPaint(SKColors.IndianRed, 5) },
                new List<SolidColorPaint>() { null, null },
            new List<double>() { 0, 0 }, new List<SolidColorPaint>() { null, null }, true
            );
            QuantileBeta = new ChartViewModelLine().InitialiseQuantile(DonneesImportes.ActualData?.GetQuantileBetaPlot());
            if (DonneesImportes.ActualData?.CurrentDistribution?.EELQuantileTest != null)
            {
                QuantileEEL = new ChartViewModelLine().InitialiseQuantile(DonneesImportes.ActualData?.GetQuantilePlot());
            }

        }
        else
        {
            QQPlot.Update(
            DonneesImportes.ActualData?.GetQQPlot(),
            new List<SolidColorPaint>() { new SolidColorPaint(SKColors.CornflowerBlue, 5), new SolidColorPaint(SKColors.IndianRed, 5) },
            new List<SolidColorPaint>() { null, null },
            new List<double>() { 0, 0 }, new List<SolidColorPaint>() { null, null });
            PPPlot.Update(
            DonneesImportes.ActualData?.GetPPPlot(),
            new List<SolidColorPaint>() { new SolidColorPaint(SKColors.CornflowerBlue, 5), new SolidColorPaint(SKColors.IndianRed, 5) },
            new List<SolidColorPaint>() { null, null },
            new List<double>() { 0, 0 }, new List<SolidColorPaint>() { null, null });
            PDFCDF.Update(
                DonneesImportes.ActualData?.GetCDFPDF(),
                new List<SolidColorPaint>() { new SolidColorPaint(SKColors.CornflowerBlue, 5), new SolidColorPaint(SKColors.IndianRed, 5) },
                new List<SolidColorPaint>() { null, null },
            new List<double>() { 0, 0 }, new List<SolidColorPaint>() { null, null }, true
            );
            QuantileBeta.UpdateQuantile(DonneesImportes.ActualData?.GetQuantileBetaPlot());
            if (DonneesImportes.ActualData?.CurrentDistribution?.EELQuantileTest != null)
            {
                if (QuantileEEL == null)
                {
                    QuantileEEL = new ChartViewModelLine().InitialiseQuantile(DonneesImportes.ActualData?.GetQuantilePlot());
                }
                else
                {
                    QuantileEEL.UpdateQuantile(DonneesImportes.ActualData?.GetQuantilePlot());
                }
            }
        }
        QQPlot.ChartJsConfig.ReinitializeChart();
        PPPlot.ChartJsConfig.ReinitializeChart();
        PDFCDF.ChartJsConfig.ReinitializeChart();
        QuantileBeta.ChartJsConfig.ReinitializeChart();
        QuantileEEL?.ChartJsConfig.ReinitializeChart();
        StateHasChanged();
    }
    public void IncludeTrunkatedDistribution()
    {
        DonneesImportes.ActualData.IncludeTrunkatedDistributions = true;
        UpdateCalibration(true, true);
    }
    public async void ExportSample()
    {
        Random r = MersenneTwister.MTRandom.Create(1234533);
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < NbRow; i++)
        {
            var sample = DonneesImportes.ActualData?.CalibratedDistribution.Simulate(r, NbCol);
            sb.AppendLine(string.Join(";", sample.Select(a => a.ToString())));
        }
        await FileUtil.SaveAs(js, "sample.csv", System.Text.Encoding.UTF8.GetBytes(sb.ToString()));
    }
    public async void AddMonteCarlo()
    {
        DonneesImportes?.ActualData?.AddMonteCarloTest();
        UpdateChart();
        SaveData();
    }
    public async void CalibrateMLI()
    {
        Notifications.Add($"La calibration par reconnaissance d'image est en cours, le calcul est long, vous receverez une notification lors de la fin du calcul.{""}");
        StateHasChanged();
        var service = new MLService();
        await service.Train(DonneesImportes.ActualData, () =>
        {
            AviableMethod.Add(MethodeCalibrationRetenue.MachineLearningImage);
            Notifications.Add($"La calibration est terminée");
            StateHasChanged();
        });
        GraphiqueMachineLearning();

    }

    private void GraphiqueMachineLearning()
    {
        ChartMatrixMachineLearning = new ChartMatrixViewModel(DonneesImportes.ActualData.ConfusionMatrixML, DonneesImportes.ActualData.Distributions.Select(a => a.Distribution.Type.ToString()).ToList());
        ChartMatrixMaximumVraissemblance = new ChartMatrixViewModel(DonneesImportes.ActualData.ConfusionMatrixMaximumVraissemblance, DonneesImportes.ActualData.Distributions.Select(a => a.Distribution.Type.ToString()).ToList());
        ChartMatrixEcart = new ChartMatrixViewModel(DonneesImportes.ActualData.ConfusionMatrixML.Moins(DonneesImportes.ActualData.ConfusionMatrixMaximumVraissemblance), DonneesImportes.ActualData.Distributions.Select(a => a.Distribution.Type.ToString()).ToList());

    }

    public void SuppressionNotification(string notif)
    {
        Notifications.Remove(notif);
    }

    private ModalChart modal;
    private ChartComponent c1;
    private ChartComponent c2;
    private ChartComponent c3;
    private ChartComponent c4;
    private ChartComponent c5;
    private ChartComponent c6;
    private ChartComponent c7;
    private ChartComponent c8;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (c1 != null)
        {
            if (c3 != null)
            {
                c3.Modal = modal;
            }
            c1.Modal = modal;
            c2.Modal = modal;

            c4.Modal = modal;
            c5.Modal = modal;
            if (c6 != null)
            {
                c6.Modal = modal;
                c7.Modal = modal;
                c8.Modal = modal;
            }
        }
    }
}
